package ${packageName} ;

/**
* 类说明: ${table.comment}--Swagger控制器类 ,使用requestbody 实现
* @author ${author}
* 生成日期 ${time}
**/
@lombok.extern.slf4j.Slf4j
@io.swagger.annotations.Api(value = "[${table.comment}]控制器", description = "[${table.comment}]相关操作")
@org.springframework.web.bind.annotation.RestController
@org.springframework.web.bind.annotation.RequestMapping("/api/${table.varName}")
public class ${table.className}Action {

    @org.springframework.beans.factory.annotation.Autowired
    private ${table.className}Service ${table.varName}Service; //注入[${table.comment}]业务逻辑类

    /**
     * 方法说明： 新增[${table.comment}]记录
     */
    @io.swagger.annotations.ApiOperation(value = "新增[${table.comment}]", notes = "返回影响记录行数")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}", name = "${table.varName}", value = "收寄信息", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("save")
    public org.alvin.code.gen.beans.RestfullResp<Integer> save(@org.springframework.web.bind.annotation.RequestBody ${table.className} ${table.varName}) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.save(${table.varName}));
    }


    /**
     * 方法说明： 删除[${table.comment}]记录
     */
    @io.swagger.annotations.ApiOperation(value = "删除[${table.comment}]", notes = "返回影响记录行数")
    @io.swagger.annotations.ApiImplicitParams({@io.swagger.annotations.ApiImplicitParam(name = "${id.lowerCamel}", value = "[${table.comment}]的主键", required = true, dataType = "array", paramType = "query")})
    @org.springframework.web.bind.annotation.PostMapping("delete")
    public org.alvin.code.gen.beans.RestfullResp<Integer> delete(@org.springframework.web.bind.annotation.RequestParam("${id.lowerCamel}") ${id.allTypeName} ${id.lowerCamel}) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.delete(id));
    }


    /**
     * 方法说明： 修改[${table.comment}]记录
     */
    @io.swagger.annotations.ApiOperation(value = "修改[${table.comment}]", notes = "返回影响记录行数,(必须传入完整对象,否则会有数据丢失)")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}", name = "${table.varName}", value = "${table.comment}", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("update")
    public org.alvin.code.gen.beans.RestfullResp<Integer> update(@org.springframework.web.bind.annotation.RequestBody ${table.className} ${table.varName}) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.update(${table.varName}));
    }

    /**
     * 方法说明： 修改[${table.comment}]记录
     */
    @io.swagger.annotations.ApiOperation(value = "修改[${table.comment}]", notes = "返回影响记录行数(传入需要修改的属性和主键即可,其他可以为空)")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}", name = "${table.varName}", value = "${table.comment}", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("updateNotNull")
    public org.alvin.code.gen.beans.RestfullResp<Integer> updateNotNull(@org.springframework.web.bind.annotation.RequestBody ${table.className} ${table.varName}) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.updateNotNull(${table.varName}));
    }

    /**
     * 方法说明： 按条件查询分页[${table.comment}]列表
     */
    @io.swagger.annotations.ApiOperation(value = "按条件查询分页[${table.comment}]列表", notes = "返回分页[${table.comment}]列表")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}Cond", name = "cond", value = "${table.comment}", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("queryPage")
    public org.alvin.code.gen.beans.RestfullResp<org.alvin.code.gen.utils.Page<${table.className}>> queryPage(@org.springframework.web.bind.annotation.RequestBody ${table.className}Cond cond) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.queryPage(cond));
    }

    /**
     * 方法说明： 按条件查询不分页[${table.comment}]列表
     */
    @io.swagger.annotations.ApiOperation(value = "按条件查询不分页[${table.comment}]列表", notes = "返回不分页[${table.comment}]列表")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}Cond", name = "cond", value = "${table.comment}", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("queryList")
    public org.alvin.code.gen.beans.RestfullResp<java.util.List<${table.className}>> queryList(@org.springframework.web.bind.annotation.RequestBody ${table.className}Cond cond) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.queryList(cond));
    }

    /**
     * 方法说明： 按条件查询一个 ${table.comment} 对象
     */
    @io.swagger.annotations.ApiOperation(value = "按条件查询一个 ${table.comment} 对象", notes = "返回 ${table.comment}对象")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}Cond", name = "cond", value = "${table.comment}", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("findOne")
    public org.alvin.code.gen.beans.RestfullResp<${table.className}> findOne(@org.springframework.web.bind.annotation.RequestBody ${table.className}Cond cond) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.findOne(cond));
    }

    /**
     * 方法说明： 按条件查询[${table.comment}]记录个数
     */
    @io.swagger.annotations.ApiOperation(value = "按条件查询[${table.comment}]记录个数", notes = "返回记录个数")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}Cond", name = "cond", value = "${table.comment}", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("queryCount")
    public org.alvin.code.gen.beans.RestfullResp<Long> queryCount(@org.springframework.web.bind.annotation.RequestBody ${table.className}Cond cond) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.queryCount(cond));
    }

    /**
     * 方法说明： 按主键查询单条[${table.comment}]记录
     */
    @io.swagger.annotations.ApiOperation(value = "按主键查询单个[${table.comment}]记录", notes = "返回单个[${table.comment}]对象")
    @io.swagger.annotations.ApiImplicitParams({@io.swagger.annotations.ApiImplicitParam(name = "${id.lowerCamel}", value = "[${table.comment}]的主键", required = true, dataType = "Long", paramType = "query")})
    @org.springframework.web.bind.annotation.PostMapping("findById")
    public org.alvin.code.gen.beans.RestfullResp<${table.className}> findById(@org.springframework.web.bind.annotation.RequestParam("id") ${id.allTypeName} ${id.lowerCamel}) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.findById(id));
    }

    /**
     * 方法说明： 按主键查询单条[${table.comment}]记录
     */
    @io.swagger.annotations.ApiOperation(value = "按主键查询单个[${table.comment}]记录(带标签)", notes = "返回单个[${table.comment}]对象(带标签)")
    @io.swagger.annotations.ApiImplicitParams({@io.swagger.annotations.ApiImplicitParam(name = "${id.lowerCamel}", value = "[${table.comment}]的主键", required = true, dataType = "Long", paramType = "query")})
    @org.springframework.web.bind.annotation.PostMapping("findFkById")
    public org.alvin.code.gen.beans.RestfullResp<${table.className}Fk> findFkById(@org.springframework.web.bind.annotation.RequestParam("${id.lowerCamel}") ${id.allTypeName} ${id.lowerCamel}) {
        return  new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.findFkById(id));
    }

    /**
     * 方法说明： 按条件查询一个 ${table.comment} 对象
     */
    @io.swagger.annotations.ApiOperation(value = "按条件查询一个 ${table.comment} 对象(带外键标签)", notes = "返回 ${table.comment}对象 (带外键标签)")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}FkCond", name = "{table.varName}Cond", value = "${table.comment}(外键)", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("findFkOne")
    public org.alvin.code.gen.beans.RestfullResp<${table.className}Fk> findFkOne(@org.springframework.web.bind.annotation.RequestBody ${table.className}FkCond ${table.varName}Cond) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.findFkOne(${table.varName}Cond));
    }

    /**
     * 方法说明: 只显示标签和id的列表
     *
     * @param ${table.varName}FkCond
     */
    @io.swagger.annotations.ApiOperation(value = "按条件查询一个 ${table.comment} 对象(只显示标签和id的列表)", notes = "返回 ${table.comment}对象 (只显示标签和id的列表)")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}FkCond", name = "${table.varName}FkCond", value = "${table.comment}", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("queryLabelList")
    public org.alvin.code.gen.beans.RestfullResp<java.util.List<org.alvin.code.gen.beans.SelectOption>> queryLabelList(@org.springframework.web.bind.annotation.RequestBody ${table.className}FkCond ${table.varName}FkCond) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.queryLabelList(${table.varName}FkCond));
    }

    /**
     * 方法说明：按条件查询不分页${table.comment}列表 (带关系表标签)
     */
    @io.swagger.annotations.ApiOperation(value = "按条件查询不分页[${table.comment}]列表 (带外键标签)", notes = "返回不分页[${table.comment}]列表 (带外键标签)")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}FkCond", name = "${table.varName}FkCond", value = "${table.comment} (外键)", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("queryFkList")
    public org.alvin.code.gen.beans.RestfullResp<java.util.List<${table.className}Fk>> queryFkList(@org.springframework.web.bind.annotation.RequestBody ${table.className}FkCond ${table.varName}FkCond) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.queryFkList(${table.varName}FkCond));
    }

    /**
     * 方法说明：按条件查询分页${table.comment}列表
     */
    @io.swagger.annotations.ApiOperation(value = "按条件查询分页[${table.comment}]列表(带外键标签)", notes = "返回分页[${table.comment}]列表(带外键标签)")
    @io.swagger.annotations.ApiImplicitParams(
            {
                    @io.swagger.annotations.ApiImplicitParam(paramType = "body", dataType = "${table.className}FkCond", name = "fkCond", value = "${table.comment}(外键)", required = true)
            })
    @io.swagger.annotations.ApiResponses({
            @io.swagger.annotations.ApiResponse(code = 0, message = "操作成功")
    })
    @org.springframework.web.bind.annotation.PostMapping("queryFkPage")
    public org.alvin.code.gen.beans.RestfullResp<org.alvin.code.gen.utils.Page<${table.className}Fk>> queryFkPage(@org.springframework.web.bind.annotation.RequestBody ${table.className}FkCond fkCond) {
        return new org.alvin.code.gen.beans.RestfullResp<>(this.${table.varName}Service.queryFkPage(fkCond));
    }

}

