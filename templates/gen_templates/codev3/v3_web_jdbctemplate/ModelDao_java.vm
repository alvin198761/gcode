package ${packageName} ;

/**
* 类说明: [${table.comment}]--数据访问层
 * @类说明: 收寄信息--
* @author ${author}
* 生成日期 ${time}
**/
@lombok.extern.slf4j.Slf4j
@org.springframework.stereotype.Repository
public class ${table.className}Dao extends org.alvin.code.gen.beans.BaseDao {

    /**
    * 方法说明：  新增${table.comment}记录
    */
    public int save(${table.className} vo) {
	   String sql = "INSERT INTO ${table.tableName} (${insertFields}) VALUES (${insertParamsColon})";
	   org.alvin.code.gen.beans.SaveKeyObj obj = saveKey(vo, sql, "${id.name}");
       vo.set${id.upperCamel}((${id.allTypeName})obj.getKey());
       return obj.getRes();
    }
    
    /**
    * 方法说明： 批量插入${table.comment}记录
    */
    public int[] insertBatch(java.util.List<${table.className}> list) {
	   String sql = "INSERT INTO ${table.tableName} (${insertFields}) VALUES (${insertParamsColon})";
       return batchOperate(list, sql);
    }
    
    /**
    * 方法说明：物理删除${table.comment}记录(多条)
    */
    public int delete(${id.allTypeName} ${id.lowerCamel}) {
        String sql = "DELETE FROM ${table.tableName} WHERE ${id.name} = " + ${id.lowerCamel};
        return jdbcTemplate.update(sql);
    }
    
    /**
    * 方法说明：更新${table.comment}记录
    */
    public int update(${table.className} vo) {
        StringBuilder sql = new StringBuilder();
        sql.append("UPDATE ${table.tableName} SET ${updateFields} ");
        sql.append(" WHERE ${id.name}=? ");
        Object[] params = {${updateParams},vo.get${id.upperCamel}()};
        return jdbcTemplate.update(sql.toString(), params);
      }


     /**
    * 方法说明： 更新${table.comment}记录,不为空的都更新掉
    */
    public int updateNotNull(${table.className} vo) {
        java.util.List<String> fields = new java.util.ArrayList<>();
        java.util.List<Object> values = new java.util.ArrayList<>();
        #foreach ($fie in $fList)
        if(vo.get${fie.upperCamel}() != null){
            fields.add(" ${fie.name} = ? ");
            values.add(vo.get${fie.upperCamel}());
        }   
        #end
        
        if(fields.isEmpty()){
            return 0;
        }
        StringBuilder sql = new StringBuilder();
        sql.append("UPDATE ${table.tableName} SET ");
        sql.append(com.google.common.base.Joiner.on(",").join(fields));
        sql.append(" WHERE ");
        Object[] params = values.toArray();
        return jdbcTemplate.update(sql.toString(), params);
      }

        /**
        * 方法说明： 按条件查询分页${table.comment}列表
        */
    public org.alvin.code.gen.utils.Page<${table.className}> queryPage(${table.className}Cond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getSelectedItems(cond));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(this.getJoinTables());
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
        sb.append(cond.getOrderSql());//增加排序子句;
        //log.info(org.alvin.code.gen.utils.SqlUtil.showSql(sb.toString(),cond.getArray()));//显示SQL语句
        return queryPage(sb.toString(), cond, ${table.className}.class);
    }
    
    /**
    * 方法说明：按条件查询不分页${table.comment}列表
    */
    public java.util.List<${table.className}> queryList(${table.className}Cond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getSelectedItems(cond));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(this.getJoinTables());
        sb.append(" WHERE 1=1 ");
    	sb.append(cond.getCondition());
    	sb.append(cond.getOrderSql());//增加排序子句;
    	return jdbcTemplate.query(sb.toString(), cond.getArray(), new org.springframework.jdbc.core.BeanPropertyRowMapper<>(${table.className}.class));
    }
    
    /**
    * 方法说明：按ID查找单个${table.comment}实体
    */
    public ${table.className} findById(${id.allTypeName} ${id.lowerCamel}) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getSelectedItems(null));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(getJoinTables());
        sb.append(" WHERE 1=1 ");
    	sb.append(" AND t.${id.name}=?");
    	return jdbcTemplate.queryForObject(sb.toString(), new Object[]{${id.lowerCamel}}, new org.springframework.jdbc.core.BeanPropertyRowMapper<>(${table.className}.class));
    }
	
	 /**
     * 方法说明：按条件查询一个 收寄信息 对象
     */
    public ${table.className} findOne(${table.className}Cond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getSelectedItems(cond));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(this.getJoinTables());
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
        sb.append(cond.getOrderSql());//增加排序子句;
        sb.append(" limit 0,1");
        return jdbcTemplate.queryForObject(sb.toString(), cond.getArray(), new org.springframework.jdbc.core.BeanPropertyRowMapper<>(${table.className}.class));
    }
    
    /**
    * 方法说明：按条件查询${table.comment}记录个数
    */
    public long queryCount(${table.className}Cond cond) {
    	String countSql = "SELECT COUNT(1) FROM ${table.tableName} t WHERE 1=1" + cond.getCondition();
    	return jdbcTemplate.queryForObject(countSql, cond.getArray(), Long.class);
    }
    
    /**
    * 方法说明：按条件查询${table.comment}记录个数
    */
    public int deleteLogic(${id.allTypeName} ${id.lowerCamel}) {
    	String sql = "UPDATE ${table.tableName} SET delete_remark=1 WHERE ${id.name} = " + ${id.lowerCamel};
    	return jdbcTemplate.update(sql);
    }

    /**
    * 方法说明：查询参数定制
    */
    public String getSelectedItems(${table.className}Cond cond){
        if(cond == null || cond.getSelectedFields() == null || cond.getSelectedFields().isEmpty()){
        return "${selectFields}"; //默认所有字段
        }
        return com.google.common.base.Joiner.on(",").join(cond.getSelectedFields());
    }

    /**
    * 方法说明：表连接代码
    * @return
    */
    public String getJoinTables(){
        return "";
    }

    /**
     * 方法说明: 查询数据包含外键对象和显示标签
     *
     * @param ${id.lowerCamel}
     * @return
     */
    public ${table.className}Fk findFkById(${id.allTypeName} ${id.lowerCamel}) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getFkSelectedItems(null));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(this.getFkJoinTables());
        sb.append(" WHERE 1=1 ");
        sb.append(" AND t.${id.name}=? ");
        return jdbcTemplate.queryForObject(sb.toString(), new Object[]{${id.lowerCamel}}, new org.springframework.jdbc.core.BeanPropertyRowMapper<>(${table.className}Fk.class));
    }

    /**
     * 方法说明: 查询数据包含外键对象和显示标签
     *
     * @param cond
     * @return
     */
    public ${table.className}Fk findFkOne(${table.className}FkCond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getFkSelectedItems(cond));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(this.getFkJoinTables());
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
        sb.append(" limit 0,1");
        return jdbcTemplate.queryForObject(sb.toString(), cond.getArray(), new org.springframework.jdbc.core.BeanPropertyRowMapper<>(${table.className}Fk.class));
    }

    /**
     * 方法说明: 只显示标签和id的列表
     *
     * @param cond
     * @return
     */
    public java.util.List<org.alvin.code.gen.beans.SelectOption> queryLabelList(${table.className}FkCond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append("t.${id.name} as value ,t.${table.labelCol} as label");
        sb.append(" FROM ${table.tableName} t ");
        sb.append(this.getFkJoinTables());
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
        sb.append(cond.getOrderSql());//增加排序子句
        return jdbcTemplate.query(sb.toString(), cond.getArray(), new org.springframework.jdbc.core.BeanPropertyRowMapper<>(org.alvin.code.gen.beans.SelectOption.class));
    }

    /**
     * 方法说明：按条件查询不分页${table.comment}列表 (带关系表标签)
     */
    public java.util.List<${table.className}Fk> queryFkList(${table.className}FkCond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getFkSelectedItems(cond));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(this.getFkJoinTables());
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
        sb.append(cond.getOrderSql());//增加排序子句;
        log.info(org.alvin.code.gen.utils.SqlUtil.showSql(sb.toString(), cond.getArray()));//显示SQL语句
        return jdbcTemplate.query(sb.toString(), cond.getArray(), new org.springframework.jdbc.core.BeanPropertyRowMapper<>(${table.className}Fk.class));
    }

    /**
     * 方法说明：按条件查询分页${table.comment}列表
     */
    public org.alvin.code.gen.utils.Page<${table.className}Fk> queryFkPage(${table.className}FkCond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getFkSelectedItems(cond));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(this.getFkJoinTables());
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
        sb.append(cond.getOrderSql());//增加排序子句;
        log.info(org.alvin.code.gen.utils.SqlUtil.showSql(sb.toString(), cond.getArray()));//显示SQL语句
        return queryPage(sb.toString(), cond, ${table.className}Fk.class);
    }

    /**
     * @return 方法说明：表连接的所有字段
     */
    public String getFkSelectedItems(${table.className}Cond cond) {
        if (cond == null || cond.getSelectedFields() == null || cond.getSelectedFields().isEmpty()) {
			StringBuilder sb = new StringBuilder();
			sb.append("${selectFields}");
			#foreach ($fi in $refFks)
				sb.append(" ,${fi.refTableShortName}.${fi.refColName} ");
			#end
            return sb.toString(); //默认所有字段
        }
        return com.google.common.base.Joiner.on(",").join(cond.getSelectedFields());
    }

    /**
     * @return 方法说明：表连接代码
     */
    public String getFkJoinTables() {
        StringBuilder sb = new StringBuilder();
		#foreach ($fi in $refFks)
			sb.append(" LEFT JOIN ${fi.refTableName} AS ${fi.refTableShortName} ON t.${fi.colName} = ${fi.refTableShortName}.${fi.refColName} ");
		#end
        return sb.toString();
    }

}