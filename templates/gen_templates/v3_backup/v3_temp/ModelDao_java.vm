package ${pName};
import java.util.List;

import org.springframework.stereotype.Repository;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import java.util.ArrayList;
import org.alvin.cishan.common.BaseDao;
import org.alvin.cishan.sys.util.SqlUtil;
import org.alvin.cishan.sys.util.Page;
import com.google.common.base.Joiner;
import lombok.extern.slf4j.Slf4j;
/**
* @类说明: ${table.comment}--数据访问层
* @author: ${author}
* @date : ${time}
**/
@Slf4j
@Repository
public class ${table.className}Dao extends BaseDao{

    private StringBuilder insert = new StringBuilder();

    /**
    * @方法说明：  构造方法,用于拼加SQL及初始化工作
    */
    public ${table.className}Dao () {
        insert.append("INSERT INTO ${table.tableName} (${insertFields}) ");
        insert.append(" VALUES (${insertParamsColon})");
    }

    /**
    * @方法说明：  新增${table.comment}记录
    */
    public int save(${table.className} vo) {
        StringBuilder sql = new StringBuilder();
        sql.append("REPLACE INTO ${table.tableName} (${allFields})");
        sql.append(" VALUES (${allFieldsParams}) ");
        Object[] params ={ ${selectFillParams} };
        //log.info(SqlUtil.showSql(sql.toString(), params));//显示SQL语句
        return jdbcTemplate.update(sql.toString(), params);
    }
    
    /**
    * @方法说明：新增${table.comment}记录并返回自增涨主键值
    */
    public long saveReturnPK(${table.className} vo) {
         return saveKey(vo, insert.toString(), "${id.name}");
    }
    
    /**
    * @方法说明：批量插入${table.comment}记录
    */
    public int[] insertBatch(List<${table.className}> list) {
       return batchOperate(list, insert.toString());
    }
    
    /**
    * @方法说明：物理删除${table.comment}记录(多条)
    */
    public int delete(${id.allTypeName} ids[]) {
        String sql = "DELETE FROM ${table.tableName} WHERE ${id.lowerCamel}" + SqlUtil.ArrayToIn(ids);
        return jdbcTemplate.update(sql);
    }
    
    /**
    * @方法说明：更新${table.comment}记录
    */
    public int update(${table.className} vo) {
        StringBuilder sql = new StringBuilder();
        sql.append("UPDATE ${table.tableName} SET ${updateFields} ");
        sql.append(" WHERE ${id.name}=? ");
        Object[] params = {${updateParams}};
        return jdbcTemplate.update(sql.toString(), params);
      }


     /**
    * @方法说明：更新${table.comment}记录,不为空的都更新掉
    */
    public int updateNotNull(${table.className} vo) {
        List<String> fields = new ArrayList<>();
        List<Object> values = new ArrayList<>();
        #foreach ($fie in $fList)
        #if ($fie.name == ${id.lowerCamel})
            #set($idGetName = 'vo.get' + $fie.upperCamel + '()')        
        #end
        #if ($fie.name != ${id.name})

        if(vo.get${fie.upperCamel}() != null){
            fields.add(" ${fie.name} = ? ");
            values.add(vo.get${fie.upperCamel}());
        }   
        #end
        #end
        
        if(fields.isEmpty()){
            return 0;
        }
        StringBuilder sql = new StringBuilder();
        sql.append("UPDATE ${table.tableName} SET ");
        sql.append(Joiner.on(",").join(fields));
        sql.append(" WHERE ${id.name}=? ");
        values.add(vo.get${id.upperCamel}());
        Object[] params = values.toArray();
        return jdbcTemplate.update(sql.toString(), params);
      }

        /**
        * @方法说明：按条件查询分页${table.comment}列表
        */
    public Page<${table.className}> queryPage(${table.className}Cond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getSelectedItems(cond));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(getJoinTables());
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
		sb.append(" order by ${id.name} desc ");
        //sb.append(cond.getOrderSql());//增加排序子句;
        //logger.info(SqlUtil.showSql(sb.toString(),cond.getArray()));//显示SQL语句
        return queryPage(sb.toString(), cond, ${table.className}.class);
    }
    
    /**
    * @方法说明：按条件查询不分页${table.comment}列表
    */
    public List<${table.className}> queryList(${table.className}Cond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getSelectedItems(cond));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(getJoinTables());
        sb.append(" WHERE 1=1 ");
    	sb.append(cond.getCondition());
		sb.append(" order by ${id.name} desc ");
    	//sb.append(" ORDER BY operate_time DESC");
    	return jdbcTemplate.query(sb.toString(), cond.getArray(), new BeanPropertyRowMapper<>(${table.className}.class));
    }
    
    /**
    * @方法说明：按ID查找单个${table.comment}实体
    */
    public ${table.className} findById(${id.allTypeName} id) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getSelectedItems(null));
        sb.append(" FROM ${table.tableName} t ");
        sb.append(getJoinTables());
        sb.append(" WHERE 1=1 ");
    	sb.append(" AND t.${id.name}=?");
    	return jdbcTemplate.queryForObject(sb.toString(), new Object[]{id}, new BeanPropertyRowMapper<>(${table.className}.class));
    }
    
    /**
    * @方法说明：按条件查询${table.comment}记录个数
    */
    public long queryCount(${table.className}Cond cond) {
    	String countSql = "SELECT COUNT(1) FROM ${table.tableName} t WHERE 1=1" + cond.getCondition();
    	return jdbcTemplate.queryForObject(countSql, cond.getArray(), Long.class);
    }
    
    /**
    * @方法说明：按条件查询${table.comment}记录个数
    */
    public int deleteLogic(${id.allTypeName} ids[]) {
    	String sql = "UPDATE ${table.tableName} SET delete_remark=1 WHERE ${id.name}" + SqlUtil.ArrayToIn(ids);
    	return jdbcTemplate.update(sql);
    }

    /**
    * @方法说明：查询参数定制
    */
    public String getSelectedItems(${table.className}Cond cond){
        if(cond == null || cond.getSelectedFields() == null || cond.getSelectedFields().isEmpty()){
        return "${selectFields}"; //默认所有字段
        }
        return Joiner.on(",").join(cond.getSelectedFields());
    }

    /**
    * @方法说明：表连接代码
    * @return
    */
    public String getJoinTables(){
        return "";
    }
}