package ${pName};
import java.util.List;

import org.springframework.stereotype.Repository;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import java.util.ArrayList;
import org.alvin.cishan.common.BaseDao;
import org.alvin.cishan.sys.util.SqlUtil;
import org.alvin.cishan.sys.util.Page;
import com.google.common.base.Joiner;
/**
* @类说明: ${cName}--数据访问层
* @author: ${auth}
* @date : ${time}
**/
@Repository
public class ${clsUpp}Dao extends BaseDao{

    private StringBuilder insert = new StringBuilder();

    /**
    * @方法说明：  构造方法,用于拼加SQL及初始化工作
    */
    public ${clsUpp}Dao () {
        insert.append("INSERT INTO ${tName} (${insertFields}) ");
        insert.append(" VALUES (${insertValuesFields})");
    }

    /**
    * @方法说明：  新增${cName}记录
    */
    public int save(${clsUpp} vo) {
        StringBuilder sql = new StringBuilder();
        sql.append("REPLACE INTO ${tName} (${replaceFields})");
        sql.append(" VALUES ${replaceValuesFields} ");
        Object[] params ={ ${paramsFields} };
        //logger.info(SqlUtil.showSql(sql.toString(), params));//显示SQL语句
        return jdbcTemplate.update(sql.toString(), params);
    }
    
    /**
    * @方法说明：新增${cName}记录并返回自增涨主键值
    */
    public long saveReturnPK(${clsUpp} vo) {
         return saveKey(vo, insert.toString(), "${idName}");
    }
    
    /**
    * @方法说明：批量插入${cName}记录
    */
    public int[] insertBatch(List<${clsUpp}> list) {
       return batchOperate(list, insert.toString());
    }
    
    /**
    * @方法说明：物理删除${cName}记录(多条)
    */
    public int delete(${idType} ids[]) {
        String sql = "DELETE FROM ${tName} WHERE ${idName}" + SqlUtil.ArrayToIn(ids);
        return jdbcTemplate.update(sql);
    }
    
    /**
    * @方法说明：更新${cName}记录
    */
    public int update(${clsUpp} vo) {
        StringBuilder sql = new StringBuilder();
        sql.append("UPDATE ${tName} SET ${updateFields} ");
        sql.append(" WHERE ${idName}=? ");
        Object[] params = {${updateParams}};
        return jdbcTemplate.update(sql.toString(), params);
      }


     /**
    * @方法说明：更新${cName}记录,不为空的都更新掉
    */
    public int updateNotNull(${clsUpp} vo) {
        List<String> fields = new ArrayList<>();
        List<Object> values = new ArrayList<>();
        #foreach ($fie in $fList)
        #if ($fie.name == ${idName})
            #set($idGetName = 'vo.get' + $fie.bigName + '()')        
        #end
        #if ($fie.name != ${idName})

        if(vo.get${fie.bigName}() != null){
            fields.add(" ${fie.name} = ? ");
            values.add(vo.get${fie.bigName}());
        }   
        #end
        #end
        
        if(fields.isEmpty()){
            return 0;
        }
        StringBuilder sql = new StringBuilder();
        sql.append("UPDATE ${tName} SET ");
        sql.append(Joiner.on(",").join(fields));
        sql.append(" WHERE ${idName}=? ");
        values.add(${idGetName});
        Object[] params = values.toArray();
        return jdbcTemplate.update(sql.toString(), params);
      }

        /**
        * @方法说明：按条件查询分页${cName}列表
        */
    public Page<${clsUpp}> queryPage(${clsUpp}Cond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getSelectedItems(cond));
        sb.append(" FROM ${tName} t ");
        sb.append(getJoinTables());
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
		sb.append(" order by ${idName} desc ");
        //sb.append(cond.getOrderSql());//增加排序子句;
        //logger.info(SqlUtil.showSql(sb.toString(),cond.getArray()));//显示SQL语句
        return queryPage(sb.toString(), cond, ${clsUpp}.class);
    }
    
    /**
    * @方法说明：按条件查询不分页${cName}列表
    */
    public List<${clsUpp}> queryList(${clsUpp}Cond cond) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getSelectedItems(cond));
        sb.append(" FROM ${tName} t ");
        sb.append(getJoinTables());
        sb.append(" WHERE 1=1 ");
    	sb.append(cond.getCondition());
		sb.append(" order by ${idName} desc ");
    	//sb.append(" ORDER BY operate_time DESC");
    	return jdbcTemplate.query(sb.toString(), cond.getArray(), new BeanPropertyRowMapper<>(${clsUpp}.class));
    }
    
    /**
    * @方法说明：按ID查找单个${cName}实体
    */
    public ${clsUpp} findById(${idType} id) {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(this.getSelectedItems(null));
        sb.append(" FROM ${tName} t ");
        sb.append(getJoinTables());
        sb.append(" WHERE 1=1 ");
    	sb.append(" AND t.${idName}=?");
    	return jdbcTemplate.queryForObject(sb.toString(), new Object[]{id}, new BeanPropertyRowMapper<>(${clsUpp}.class));
    }
    
    /**
    * @方法说明：按条件查询${cName}记录个数
    */
    public long queryCount(${clsUpp}Cond cond) {
    	String countSql = "SELECT COUNT(1) FROM ${tName} t WHERE 1=1" + cond.getCondition();
    	return jdbcTemplate.queryForObject(countSql, cond.getArray(), Long.class);
    }
    
    /**
    * @方法说明：按条件查询${cName}记录个数
    */
    public int deleteLogic(${idType} ids[]) {
    	String sql = "UPDATE ${tName} SET delete_remark=1 WHERE ${idName}" + SqlUtil.ArrayToIn(ids);
    	return jdbcTemplate.update(sql);
    }

    /**
    * @方法说明：查询参数定制
    */
    public String getSelectedItems(${clsUpp}Cond cond){
        if(cond == null || cond.getSelectedFields() == null || cond.getSelectedFields().isEmpty()){
        return "${selectItems}"; //默认所有字段
        }
        return Joiner.on(",").join(cond.getSelectedFields());
    }

    /**
    * @方法说明：表连接代码
    * @return
    */
    public String getJoinTables(){
        return "";
    }
}