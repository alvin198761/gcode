package ${pName};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.*;
import org.springframework.stereotype.Controller;
import com.yijiaqi.bsv1.gdcontroller.GdBaseController;
import com.yijiaqi.bsv1.AjaxResult;
/**
* @类说明: "[${cName}]app端Swagger控制器类 ,使用requestbody 实现"
* @author: ${auth}
* @date : ${time}
**/
@Api(value = "[${cName}]控制器", description = "[${cName}]相关操作")
@Controller
@RequestMapping("/gd/${lowUpp}")
public class ${clsUpp}Controller extends GdBaseController{

    @Autowired
    private ${clsUpp}Service service; //注入[${cName}]业务逻辑类

    /**
     * @方法说明：  新增[${cName}]记录
     */
    @ApiOperation(value = "新增[${cName}]", notes = "返回影响记录行数")
    @ApiImplicitParams(
    {
        @ApiImplicitParam(paramType = "body", dataType = "${clsUpp}", name = "${lowUpp}", value = "${cName}", required = true) 
    })
    @ApiResponses({
        @ApiResponse(code = 0, message = "操作成功")
    })
    @ResponseBody
    @RequestMapping(value = "/save", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
    public AjaxResult save(@RequestBody ${clsUpp} ${lowUpp}) {
            return ajaxDoneResult(this.service.save(${lowUpp}));
        }
    

    /**
    * @方法说明： 删除[${cName}]记录
    */
    @ApiOperation(value = "删除[${cName}]", notes = "返回影响记录行数")
    @ApiImplicitParams({ @ApiImplicitParam(name = "id", value = "[${cName}]的主键", required = true, dataType = "array", paramType = "query")})
    @ResponseBody
    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
    public AjaxResult delete(@RequestParam("id") ${idType} id) {
            return ajaxDoneResult(this.service.delete(id));
        }

        
    /**
    * @方法说明： 修改[${cName}]记录
    */
    @ApiOperation(value = "修改[${cName}]", notes = "返回影响记录行数,(必须传入完整对象,否则会有数据丢失)")
     @ApiImplicitParams(
    {
        @ApiImplicitParam(paramType = "body", dataType = "${clsUpp}", name = "${lowUpp}", value = "${cName}", required = true) 
    })
    @ApiResponses({
        @ApiResponse(code = 0, message = "操作成功")
    })
    @ResponseBody
    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
    public AjaxResult update(@RequestBody ${clsUpp} ${lowUpp}) {
        return ajaxDoneResult(this.service.update(${lowUpp}));
    }
    
      /**
    * @方法说明： 修改[${cName}]记录
    */
    @ApiOperation(value = "修改[${cName}]", notes = "返回影响记录行数(传入需要修改的属性和主键即可,其他可以为空)")
     @ApiImplicitParams(
    {
        @ApiImplicitParam(paramType = "body", dataType = "${clsUpp}", name = "${lowUpp}", value = "${cName}", required = true) 
    })
    @ApiResponses({
        @ApiResponse(code = 0, message = "操作成功")
    })
    @ResponseBody
    @RequestMapping(value = "/updateNotNull", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
    public AjaxResult updateNotNull(@RequestBody ${clsUpp} ${lowUpp}) {
        return ajaxDoneResult(this.service.updateNotNull(${lowUpp}));
    }

    /**
    * @方法说明： 按条件查询分页[${cName}]列表
    */
    @ApiOperation(value = "按条件查询分页[${cName}]列表", notes = "返回分页[${cName}]列表")
     @ApiImplicitParams(
    {
        @ApiImplicitParam(paramType = "body", dataType = "${clsUpp}Vo", name = "vo", value = "${cName}", required = true) 
    })
    @ApiResponses({
        @ApiResponse(code = 0, message = "操作成功")
    })
    @ResponseBody
    @RequestMapping(value = "/queryPage", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
    public AjaxResult queryPage(@RequestBody ${clsUpp}Vo vo) {
        return ajaxDoneResult(this.service.queryPage(vo));
    }

    /**
    * @方法说明： 按条件查询不分页[${cName}]列表
    */
    @ApiOperation(value = "按条件查询不分页[${cName}]列表", notes = "返回不分页[${cName}]列表")
    @ApiImplicitParams(
    {
        @ApiImplicitParam(paramType = "body", dataType = "${clsUpp}Vo", name = "vo", value = "${cName}", required = true) 
    })
    @ApiResponses({
        @ApiResponse(code = 0, message = "操作成功")
    })
    @ResponseBody
    @RequestMapping(value = "/queryList", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
    public AjaxResult queryList(@RequestBody ${clsUpp}Vo vo) {
            return ajaxDoneResult(this.service.queryList(vo));
    }
    
      /**
    * @方法说明： 按条件查询一个 ${cName} 对象
    */
    @ApiOperation(value = "按条件查询一个 ${cName} 对象", notes = "返回 ${cName}对象")
    @ApiImplicitParams(
    {
        @ApiImplicitParam(paramType = "body", dataType = "${clsUpp}Vo", name = "vo", value = "${cName}", required = true) 
    })
    @ApiResponses({
        @ApiResponse(code = 0, message = "操作成功")
    })
    @ResponseBody
    @RequestMapping(value = "/findOne", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
    public AjaxResult findOne(@RequestBody ${clsUpp}Vo vo) {
        return ajaxDoneResult(this.service.findOne(vo));
    }
            
    /**
    * @方法说明： 按条件查询[${cName}]记录个数
    */
    @ApiOperation(value = "按条件查询[${cName}]记录个数", notes = "返回记录个数")
    @ApiImplicitParams(
    {
        @ApiImplicitParam(paramType = "body", dataType = "${clsUpp}Vo", name = "vo", value = "${cName}", required = true) 
    })
    @ApiResponses({
        @ApiResponse(code = 0, message = "操作成功")
    })
    @RequestMapping(value = "/queryCount", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
    public AjaxResult queryCount(@RequestBody ${clsUpp}Vo vo) {
        return ajaxDoneResult(this.service.queryCount(vo));
    }
                
    /**
    * @方法说明： 按主键查询单条[${cName}]记录
    */
    @ApiOperation(value = "按主键查询单个[${cName}]记录", notes = "返回单个[${cName}]对象")
    @ApiImplicitParams({ @ApiImplicitParam(name = "id", value = "[${cName}]的主键", required = true, dataType = "${idType}", paramType = "query")})
    @RequestMapping(value = "/findById", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
    public AjaxResult findById(@RequestParam("id") ${idType} id) {
            return ajaxDoneResult(service.findById(id));
        }

}